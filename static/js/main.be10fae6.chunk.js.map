{"version":3,"sources":["processInfo.js","algorithms/rms.js","algorithms/edf.js","App.js","index.js"],"names":["processInfo","pid","period","execTime","color","this","Math","floor","random","toString","completed","processed","startFrom","rmsSolve","processes","tillNum","opQueue","uti","reduce","acc","proc","n","length","limit","pow","console","log","queue","map","p","instace","op","instances","Array","from","_","currProc","maxPriProc","index","forEach","process","j","splice","push","i","prevProc","pi","some","edfSolve","osOptions","value","label","scheOptions","rtos","App","useState","setProcesses","setQueue","setOp","nPid","setNPid","nPer","setNPer","nExec","setNExec","setTillNum","osOpt","setOsOpt","scheOpt","setSceOpt","dist","pidRef","useRef","nprocs","isRunning","setIsRunning","runningRef","currTime","setCurrTime","nextStep","current","t","useEffect","setTimeout","id","options","onChange","opt","isSearchable","className","proces","style","backgroundColor","ref","e","target","onClick","c","focus","marginLeft","colSpan","min","type","max","resOp","tempQ","isOk","startSim","viewBox","x1","y1","x2","y2","x","y","fill","fontSize","width","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAceA,EAVX,WAAYC,EAAKC,EAAQC,EAAUC,GAAQ,oBACvCC,KAAKJ,IAAMA,EACXI,KAAKH,QAAUA,EACfG,KAAKF,UAAYA,EACjBE,KAAKD,MAAQA,GAPV,IAAME,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,IAQvDJ,KAAKK,UAAY,EACjBL,KAAKM,UAAY,EACjBN,KAAKO,UAAY,G,OC0DVC,EApEE,SAACC,EAAWC,GACzB,IAAMC,EAAU,GAEVC,EAAMH,EAAUI,QAClB,SAACC,EAAKC,GAAN,OAAeD,EAAMC,EAAKjB,SAAWiB,EAAKlB,SAC1C,GAEEmB,EAAIP,EAAUQ,OACdC,EAAQF,GAAKf,KAAKkB,IAAI,EAAG,EAAIH,GAAK,GACxCI,QAAQC,IAAIT,GACZQ,QAAQC,IAAIH,GAMZ,IAJA,IAAMI,EAAQb,EAAUc,KAAI,SAACC,GAAD,mBAAC,eAAYA,GAAb,IAAgBC,QAAS,OAC/CC,EAAK,GACLC,EAAYC,MAAMC,KAAKD,MAAMnB,EAAUQ,SAAS,SAACa,GAAD,OAAO,KACzDC,EAAW,KAfsB,cAiBjC,IAawB,IAbpBC,EAAa,KACbC,GAAS,GACbX,EAAMY,SAAQ,SAACC,EAASC,GACpB,GAAkB,MAAdJ,EAGA,OAFAA,EAAaG,EACbF,EAAQG,OAFY,KAKpBJ,EAAWlC,SAAWqC,EAAQrC,WAC9BkC,EAAaG,EACbF,EAAQG,MAGE,MAAdJ,MACgB,MAAZD,IAA4B,QAAR,EAAAA,SAAA,eAAUjC,WAAV,UAAqBkC,SAArB,aAAqB,EAAYlC,aACrDwB,EAAMe,OAAOJ,EAAO,GAChBF,GAAUT,EAAMgB,KAAN,eAAgBP,IAC9BC,EAAWzB,UAAYgC,GACvBR,EAAWC,GACF3B,UAAY,EACrBqB,EAAGY,KAAKN,KAGhB,IAAIQ,EAAW,KACC,MAAZT,IACAA,EAASzB,YACTyB,EAAS1B,YACTmC,EAAQ,eAAQT,GACZA,EAASzB,WAAayB,EAASjC,WAC/BiC,EAAW,OAInBtB,EAAUyB,SAAQ,SAACC,EAASM,IACnBF,EAAI,GAAKJ,EAAQtC,SAAW,IACzByB,EAAMoB,MAAK,SAAClB,GAAD,OAAOA,EAAE5B,MAAQuC,EAAQvC,QAEpCwB,QAAQC,IAAR,mBAAwBkB,EAAI,EAA5B,qBAA0CJ,EAAQvC,MAClD2C,EAAI7B,GAEJY,EAAMgB,KAAN,2BAAgBH,GAAhB,IAAyBV,QAASE,EAAUc,YAIxD9B,EAAQ2B,KAAK,CACTE,EAAQ,eAAQA,GAAa,KAC7BlB,EAAMC,KAAI,SAACC,GAAD,sBAAaA,QA/DM,KAgB5Be,EAAI,EAAGA,EAAI7B,EAAS6B,IAAM,EAA1BA,GAkDT,MAAO,CAACb,EAAIf,ICYDgC,EA9EE,SAAClC,EAAWC,GACzB,IAAMC,EAAU,GACVC,EAAMH,EAAUI,QAClB,SAACC,EAAKC,GAAN,OAAeD,EAAMC,EAAKjB,SAAWiB,EAAKlB,SAC1C,GAEJuB,QAAQC,IAAIT,GAMZ,IAJA,IAAMU,EAAQb,EAAUc,KAAI,SAACC,GAAD,mBAAC,eAAYA,GAAb,IAAgBC,QAAS,OAC/CC,EAAK,GACLC,EAAYC,MAAMC,KAAKD,MAAMnB,EAAUQ,SAAS,SAACa,GAAD,OAAO,KACzDC,EAAW,KAXsB,cAajC,IAAIC,EAAa,KACbC,GAAS,EACbX,EAAMY,SAAQ,SAACC,EAASC,GACpB,GAAkB,MAAdJ,EAGA,OAFAA,EAAaG,EACbF,EAAQG,OAFY,KAOpBJ,EAAWnC,OAASmC,EAAWP,QAC/BU,EAAQtC,OAASsC,EAAQV,UAEzBO,EAAaG,EACbF,EAAQG,MAGE,MAAdJ,IAGgB,MAAZD,GACAA,EAASlC,OAASkC,EAASN,QACvBO,EAAWnC,OAASmC,EAAWP,WAEnCH,EAAMe,OAAOJ,EAAO,GAChBF,GAAUT,EAAMgB,KAAN,eAAgBP,IAC9BC,EAAWzB,UAAYgC,GACvBR,EAAWC,GACF3B,UAAY,EACrBqB,EAAGY,KAAKN,IAGhB,IAAIQ,EAAW,KAEC,MAAZT,IACAA,EAASzB,YACTyB,EAAS1B,YACTmC,EAAQ,eAAQT,GAEZA,EAASzB,WAAayB,EAASjC,WAC/BiC,EAAW,OAInBtB,EAAUyB,SAAQ,SAACC,EAASM,GACa,IAAD,GAA/BF,EAAI,GAAKJ,EAAQtC,SAAW,IAEzByB,EAAMoB,MAAK,SAAClB,GAAD,OAAOA,EAAE5B,MAAQuC,EAAQvC,SAC5B,QAAR,EAAAmC,SAAA,eAAUnC,OAAQuC,EAAQvC,KAG1BwB,QAAQC,IAAR,mBAAwBkB,EAAI,EAA5B,qBAA0CJ,EAAQvC,MAClD2C,EAAI7B,GAEJY,EAAMgB,KAAN,2BAAgBH,GAAhB,IAAyBV,QAASE,EAAUc,YAIxD9B,EAAQ2B,KAAK,CACTE,EAAQ,eAAQA,GAAa,KAC7BlB,EAAMC,KAAI,SAACC,GAAD,sBAAaA,QAzEM,KAY5Be,EAAI,EAAGA,EAAI7B,EAAS6B,IAAM,EAA1BA,GAgET,MAAO,CAACb,EAAIf,I,uBCpEViC,EAAY,CAAC,CAAEC,MAAO,OAAQC,MAAO,SAErCC,EAAc,CAChBC,KAAM,CACF,CAAEH,MAAO,MAAOC,MAAO,6BACvB,CAAED,MAAO,MAAOC,MAAO,wCAoVhBG,MAhVf,WAAgB,IAAD,EACuBC,mBAAS,IADhC,mBACJzC,EADI,KACO0C,EADP,OAEeD,mBAAS,IAFxB,mBAEJ5B,EAFI,KAEG8B,EAFH,OAGSF,mBAAS,IAHlB,mBAGJxB,EAHI,KAGA2B,EAHA,OAIaH,mBAAS,MAJtB,mBAIJI,EAJI,KAIEC,EAJF,OAKaL,mBAAS,IALtB,mBAKJM,EALI,KAKEC,EALF,OAMeP,mBAAS,IANxB,mBAMJQ,EANI,KAMGC,EANH,OAOmBT,mBAAS,IAP5B,mBAOJxC,EAPI,KAOKkD,EAPL,OAQeV,mBAASN,EAAU,IARlC,mBAQJiB,EARI,KAQGC,EARH,OASkBZ,mBAASH,EAAYH,EAAU,GAAGC,OAAO,IAT3D,mBASJkB,EATI,KASKC,EATL,KAULC,EAAO,GAIPC,EAASC,mBACTC,EAASD,iBAAO,GAfX,EAgBuBjB,oBAAS,GAhBhC,mBAgBJmB,EAhBI,KAgBOC,EAhBP,KAiBLC,EAAaJ,iBAAOE,GAjBf,GAkBqBnB,mBAAS,GAlB9B,qBAkBJsB,GAlBI,MAkBMC,GAlBN,MAoBLC,GAAW,WACRH,EAAWI,SAChBF,IAAY,SAACG,GACT,OAAIA,GAAKlE,GAAYkE,GAAKtD,EAAML,QAAUK,EAAML,OAAS,GACrDqD,GAAa,GACbC,EAAWI,SAAU,EACdC,GAEJA,EAAI,MA0CnB,OAtCAC,qBAAU,WACDN,EAAWI,SAChBG,WAAWJ,GAtBD,QA2DV,sBAAKK,GAAG,MAAR,UACI,sBAAKA,GAAG,SAAR,UACI,cAAC,IAAD,CACIC,QAASpC,EACTqC,SAAU,SAACC,GACPpB,EAASoB,IAEbC,cAAc,EACdtC,MAAOgB,EACPuB,UAAU,WAEd,cAAC,IAAD,CACIJ,QAASjC,EAAYc,EAAMhB,OAC3BoC,SAAU,SAACC,GACPlB,EAAUkB,IAEdrC,MAAOkB,EACPoB,cAAc,EACdC,UAAU,WAEd,sBAAKA,UAAU,SAAf,UACI,uBAAOL,GAAG,aAAaK,UAAU,QAAjC,SACI,kCACI,+BACI,yCACA,wCACA,mDAEH3E,EAAUc,KAAI,SAAC8D,EAAQ9C,GAAT,OACX,+BACI,+BACK8C,EAAOzF,IAAK,IACb,sBACI0F,MAAO,CACHC,gBAAiBF,EAAOtF,OAFhC,kCAQJ,6BAAKsF,EAAOxF,SACZ,6BAAKwF,EAAOvF,aAZPuF,EAAOzF,QAepB,+BACI,6BACI,uBACI4F,IAAKtB,EACLrB,MAAOS,EACP2B,SAAU,SAACQ,GAAD,OACNlC,EAAQkC,EAAEC,OAAO7C,YAI7B,6BACI,uBACIA,MAAOW,EACPyB,SAAU,SAACQ,GAAD,OACNhC,EAAQgC,EAAEC,OAAO7C,YAI7B,+BACI,uBACIA,MAAOa,EACPuB,SAAU,SAACQ,GAAD,OACN9B,EAAS8B,EAAEC,OAAO7C,UAG1B,wBACI8C,QAzGd,WAClBxC,GAAa,SAACyC,GAAD,4BAAWA,GAAX,CAAc,IAAIjG,EAAY2D,EAAME,EAAME,QACvDH,EAAQ,OAAQa,EAAOO,SACvBlB,EAAQ,IACRE,EAAS,IACTO,EAAOS,QAAQkB,SAqGiBP,MAAO,CAAEQ,WAAY,QAFzB,0BAWhB,qBAAKf,GAAG,QAAR,SACKzD,EAAML,QAAUuD,IAAYlD,EAAML,QAC/B,gCACI,kCACI,6BACI,oBAAI8E,QAAS,EAAb,qBAEJ,+BACI,yCACA,kDACA,sDAEHzE,EACGrB,KAAK+F,IAAIxB,GAAUlD,EAAML,OAAS,IACpC,GACE,qBACIqE,MAAO,CACHC,gBACI,0BAHZ,UAMI,6BAEQjE,EACIrB,KAAK+F,IACDxB,GACAlD,EAAML,OAAS,IAErB,GAAGrB,MAGb,6BACK0B,EACGrB,KAAK+F,IACDxB,GACAlD,EAAML,OAAS,IAErB,GAAGpB,OACDyB,EACIrB,KAAK+F,IACDxB,GACAlD,EAAML,OAAS,IAErB,GAAGQ,UAEb,6BAEQH,EACIrB,KAAK+F,IACDxB,GACAlD,EAAML,OAAS,IAErB,GAAGX,eAKjB,qBACIgF,MAAO,CACHC,gBACI,0BAHZ,UAMI,sCACA,uCACA,0CAGPjE,EACGrB,KAAK+F,IAAIxB,GAAUlD,EAAML,OAAS,IACpC,GAAGM,KAAI,SAACC,EAAGe,GAAJ,OACL,+BACI,6BAAKf,EAAE5B,MACP,6BAAK4B,EAAE3B,OAAS2B,EAAEC,UAClB,6BAAKD,EAAElB,cAHX,gBAAkBiC,iBAW1C,uBAjKJ,uBAkKyB7B,EAlKzB,IAkKmC,MAC/B,uBACIuF,KAAK,QACLD,IAAI,KACJE,IAAI,MACJrD,MAAOnC,EACP0E,UAAU,SACVH,SAAU,SAACQ,GACP7B,EAAW6B,EAAEC,OAAO7C,UAG5B,uBACA,wBACI8C,QAAS,WACLrB,GAAcD,GACdE,EAAWI,SAAWN,EACjBA,GA9MR,WACb,IAAI8B,EAAQ,GACRC,EAAQ,GACRC,GAAO,EACX,OAAQtC,EAAQlB,OACZ,IAAK,MAAL,MACqBrC,EAASC,EAAWC,GADzC,mBACKyF,EADL,KACYC,EADZ,KAEI,MACJ,IAAK,MAAL,MACqBzD,EAASlC,EAAWC,GADzC,mBACKyF,EADL,KACYC,EADZ,KAEI,MACJ,QACIhF,QAAQC,IAAI,UACZgF,GAAO,EAGXA,GACA5B,GAAY,GACZpB,EAAM8C,GACN/C,EAASgD,GACT1B,OAEAJ,GAAcC,EAAWI,SACzBJ,EAAWI,SAAWJ,EAAWI,SAwLjB2B,IALZ,SASKjC,EAAY,OAAS,aAK9B,qBAAKe,UAAU,gBAAf,SACI,sBAAKmB,QAAO,cAAmB,KAAV7F,EAAT,QAAZ,UACI,8BACI,sBACI8F,GAAG,IACHC,GAAG,MACHC,GAAG,OACHC,GAAG,MACHvB,UAAU,SAGbxD,MAAMC,KAAKD,MAAM,MAAML,KAAI,SAACO,EAAGS,GAC5B,OACI,8BACI,sBACIiE,GAAIvC,GAAQ1B,EAAI,GAChBkE,GAAI,GACJC,GAAIzC,GAAQ1B,EAAI,GAChBoE,GAAI,IACJvB,UAAU,SAEd,sBACIwB,EAAG3C,GAAQ1B,EAAI,GACfsE,EAAG,IACHC,KAAK,QACLC,SAAS,KAJb,SAMKxE,EAAI,MAdL,KAAOA,EAAEnC,kBAoB7B,4BACKsB,EAAGH,KACA,SAACC,EAAGe,GAAJ,OACIf,EAAEjB,WAAaiE,IACX,8BAOI,sBACIoC,EAAG3C,EAAOzC,EAAEjB,UACZsG,EAAG,GACHG,MACI/C,GACCzC,EAAEnB,UAAYmB,EAAEjB,UACjBiE,GACMA,GAAWhD,EAAEjB,UACbiB,EAAEnB,WAEZ4G,OAAQ,GACR7B,UAAU,KACV0B,KAAMtF,EAAEzB,MAAQ,OAGpB,sBACI6G,EAAG3C,EAAOzC,EAAEjB,UAAY,EACxBsG,EAAG,GACHE,SAAS,KAHb,SAKKvF,EAAEC,YAzBH,KACAD,EAAE5B,IAAIQ,WACNoB,EAAEjB,UAAUH,0BC1TxD8G,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.be10fae6.chunk.js","sourcesContent":["function getRandomColor() {\r\n    return \"#\" + Math.floor(Math.random() * 16777215).toString(16);\r\n}\r\nclass processInfo {\r\n    constructor(pid, period, execTime, color) {\r\n        this.pid = pid;\r\n        this.period = +period; //casting of string to number\r\n        this.execTime = +execTime;\r\n        this.color = color || getRandomColor(); //Getnerate randiom color for the process\r\n        this.completed = 0;\r\n        this.processed = 0;\r\n        this.startFrom = 0;\r\n    }\r\n}\r\nexport default processInfo;\r\n","//Rate-monotonic scheduling  (https://en.wikipedia.org/wiki/Rate-monotonic_scheduling)\r\nconst rmsSolve = (processes, tillNum) => {\r\n    const opQueue = [];\r\n\r\n    const uti = processes.reduce(\r\n        (acc, proc) => acc + proc.execTime / proc.period,\r\n        0\r\n    );\r\n    const n = processes.length;\r\n    const limit = n * (Math.pow(2, 1 / n) - 1);\r\n    console.log(uti);\r\n    console.log(limit);\r\n    //Fails if uti > 0.6932\r\n    const queue = processes.map((p) => ({ ...p, instace: 1 }));\r\n    const op = [];\r\n    const instances = Array.from(Array(processes.length), (_) => 2);\r\n    let currProc = null;\r\n    for (let i = 0; i < tillNum; i++) {\r\n        let maxPriProc = null;\r\n        let index = -1;\r\n        queue.forEach((process, j) => {\r\n            if (maxPriProc == null) {\r\n                maxPriProc = process;\r\n                index = j;\r\n                return;\r\n            }\r\n            if (maxPriProc.execTime > process.execTime) {\r\n                maxPriProc = process;\r\n                index = j;\r\n            }\r\n        });\r\n        if (maxPriProc != null) {\r\n            if (currProc == null || currProc?.execTime > maxPriProc?.execTime) {\r\n                queue.splice(index, 1);\r\n                if (currProc) queue.push({ ...currProc });\r\n                maxPriProc.startFrom = i;\r\n                currProc = maxPriProc;\r\n                currProc.completed = 0;\r\n                op.push(maxPriProc);\r\n            }\r\n        }\r\n        let prevProc = null;\r\n        if (currProc != null) {\r\n            currProc.processed++;\r\n            currProc.completed++;\r\n            prevProc = { ...currProc };\r\n            if (currProc.processed >= currProc.execTime) {\r\n                currProc = null;\r\n            }\r\n        }\r\n        // eslint-disable-next-line no-loop-func\r\n        processes.forEach((process, pi) => {\r\n            if ((i + 1) % process.period === 0) {\r\n                if (queue.some((p) => p.pid === process.pid)) {\r\n                    //TODO: Fails\r\n                    console.log(`Fails at ${i + 1} for proc ${process.pid}`);\r\n                    i = tillNum;\r\n                } else {\r\n                    queue.push({ ...process, instace: instances[pi]++ });\r\n                }\r\n            }\r\n        });\r\n        opQueue.push([\r\n            prevProc ? { ...prevProc } : null,\r\n            queue.map((p) => ({ ...p })),\r\n        ]);\r\n    }\r\n    return [op, opQueue];\r\n};\r\nexport default rmsSolve;\r\n","//Earliest deadline first scheduling (https://en.wikipedia.org/wiki/Earliest_deadline_first_scheduling)\r\nconst edfSolve = (processes, tillNum) => {\r\n    const opQueue = [];\r\n    const uti = processes.reduce(\r\n        (acc, proc) => acc + proc.execTime / proc.period,\r\n        0\r\n    );\r\n    console.log(uti);\r\n    //Fails if uti > 1\r\n    const queue = processes.map((p) => ({ ...p, instace: 1 }));\r\n    const op = [];\r\n    const instances = Array.from(Array(processes.length), (_) => 2);\r\n    let currProc = null;\r\n    for (let i = 0; i < tillNum; i++) {\r\n        let maxPriProc = null;\r\n        let index = -1;\r\n        queue.forEach((process, j) => {\r\n            if (maxPriProc == null) {\r\n                maxPriProc = process;\r\n                index = j;\r\n                return;\r\n            }\r\n            //Having earliest dealine (period * instace)\r\n            if (\r\n                maxPriProc.period * maxPriProc.instace >\r\n                process.period * process.instace\r\n            ) {\r\n                maxPriProc = process;\r\n                index = j;\r\n            }\r\n        });\r\n        if (maxPriProc != null) {\r\n            //there is no currProc or currProc's deadline is greater than maxPrioProc's\r\n            if (\r\n                currProc == null ||\r\n                currProc.period * currProc.instace >\r\n                    maxPriProc.period * maxPriProc.instace\r\n            ) {\r\n                queue.splice(index, 1);\r\n                if (currProc) queue.push({ ...currProc });\r\n                maxPriProc.startFrom = i;\r\n                currProc = maxPriProc;\r\n                currProc.completed = 0;\r\n                op.push(maxPriProc);\r\n            }\r\n        }\r\n        let prevProc = null;\r\n\r\n        if (currProc != null) {\r\n            currProc.processed++;\r\n            currProc.completed++;\r\n            prevProc = { ...currProc };\r\n\r\n            if (currProc.processed >= currProc.execTime) {\r\n                currProc = null;\r\n            }\r\n        }\r\n        // eslint-disable-next-line no-loop-func\r\n        processes.forEach((process, pi) => {\r\n            if ((i + 1) % process.period === 0) {\r\n                if (\r\n                    queue.some((p) => p.pid === process.pid) ||\r\n                    currProc?.pid === process.pid\r\n                ) {\r\n                    //TODO: Fails\r\n                    console.log(`Fails at ${i + 1} for proc ${process.pid}`);\r\n                    i = tillNum;\r\n                } else {\r\n                    queue.push({ ...process, instace: instances[pi]++ });\r\n                }\r\n            }\r\n        });\r\n        opQueue.push([\r\n            prevProc ? { ...prevProc } : null,\r\n            queue.map((p) => ({ ...p })),\r\n        ]);\r\n    }\r\n    return [op, opQueue];\r\n};\r\nexport default edfSolve;\r\n","import { useState, useRef, useEffect } from \"react\";\nimport Select from \"react-select\";\nimport processInfo from \"./processInfo\";\nimport rmsSolve from \"./algorithms/rms\";\nimport edfSolve from \"./algorithms/edf\";\n\nimport \"./App.css\";\nimport { queryByLabelText } from \"@testing-library/react\";\n\nconst osOptions = [{ value: \"rtos\", label: \"RTOS\" }];\n\nconst scheOptions = {\n    rtos: [\n        { value: \"rms\", label: \"Rate-monotonic scheduling\" },\n        { value: \"edf\", label: \"Earliest deadline first scheduling\" },\n    ],\n};\n\nfunction App() {\n    const [processes, setProcesses] = useState([]); //Input of Process Tabel\n    const [queue, setQueue] = useState([]); //current queue\n    const [op, setOp] = useState([]); //Op used for viz\n    const [nPid, setNPid] = useState(\"T1\");\n    const [nPer, setNPer] = useState(\"\");\n    const [nExec, setNExec] = useState(\"\");\n    const [tillNum, setTillNum] = useState(50);\n    const [osOpt, setOsOpt] = useState(osOptions[0]);\n    const [scheOpt, setSceOpt] = useState(scheOptions[osOptions[0].value][0]);\n    const dist = 25;\n    const he = 10;\n    const SPEED = 1000;\n\n    const pidRef = useRef();\n    const nprocs = useRef(1);\n    const [isRunning, setIsRunning] = useState(false);\n    const runningRef = useRef(isRunning);\n    const [currTime, setCurrTime] = useState(0);\n\n    const nextStep = () => {\n        if (!runningRef.current) return;\n        setCurrTime((t) => {\n            if (t >= tillNum || (t >= queue.length && queue.length > 0)) {\n                setIsRunning(false);\n                runningRef.current = false;\n                return t;\n            }\n            return t + 1;\n        });\n    };\n\n    useEffect(() => {\n        if (!runningRef.current) return;\n        setTimeout(nextStep, SPEED);\n    });\n    const addNewProcess = () => {\n        setProcesses((c) => [...c, new processInfo(nPid, nPer, nExec)]);\n        setNPid(\"T\" + ++nprocs.current);\n        setNPer(\"\");\n        setNExec(\"\");\n        pidRef.current.focus();\n    };\n\n    const startSim = () => {\n        let resOp = [];\n        let tempQ = [];\n        let isOk = true;\n        switch (scheOpt.value) {\n            case \"rms\":\n                [resOp, tempQ] = rmsSolve(processes, tillNum);\n                break;\n            case \"edf\":\n                [resOp, tempQ] = edfSolve(processes, tillNum);\n                break;\n            default:\n                console.log(\"Wrongs\");\n                isOk = false;\n                break;\n        }\n        if (isOk) {\n            setCurrTime(0);\n            setOp(resOp);\n            setQueue(tempQ);\n            nextStep();\n        } else {\n            setIsRunning(!runningRef.current);\n            runningRef.current = !runningRef.current;\n        }\n    };\n    return (\n        <div id=\"app\">\n            <div id=\"inputs\">\n                <Select\n                    options={osOptions}\n                    onChange={(opt) => {\n                        setOsOpt(opt);\n                    }}\n                    isSearchable={false}\n                    value={osOpt}\n                    className=\"select\"\n                />\n                <Select\n                    options={scheOptions[osOpt.value]}\n                    onChange={(opt) => {\n                        setSceOpt(opt);\n                    }}\n                    value={scheOpt}\n                    isSearchable={false}\n                    className=\"select\"\n                />\n                <div className=\"tables\">\n                    <table id=\"process_in\" className=\"table\">\n                        <tbody>\n                            <tr>\n                                <th>Process</th>\n                                <th>Period</th>\n                                <th>Execution Time</th>\n                            </tr>\n                            {processes.map((proces, i) => (\n                                <tr key={proces.pid}>\n                                    <td>\n                                        {proces.pid}{\" \"}\n                                        <span\n                                            style={{\n                                                backgroundColor: proces.color,\n                                            }}\n                                        >\n                                                 \n                                        </span>\n                                    </td>\n                                    <td>{proces.period}</td>\n                                    <td>{proces.execTime}</td>\n                                </tr>\n                            ))}\n                            <tr>\n                                <td>\n                                    <input\n                                        ref={pidRef}\n                                        value={nPid}\n                                        onChange={(e) =>\n                                            setNPid(e.target.value)\n                                        }\n                                    />\n                                </td>\n                                <td>\n                                    <input\n                                        value={nPer}\n                                        onChange={(e) =>\n                                            setNPer(e.target.value)\n                                        }\n                                    />\n                                </td>\n                                <td>\n                                    <input\n                                        value={nExec}\n                                        onChange={(e) =>\n                                            setNExec(e.target.value)\n                                        }\n                                    />\n                                    <button\n                                        onClick={addNewProcess}\n                                        style={{ marginLeft: \"10px\" }}\n                                    >\n                                        +\n                                    </button>\n                                </td>\n                            </tr>\n                        </tbody>\n                    </table>\n\n                    <div id=\"queue\">\n                        {queue.length && currTime <= queue.length && (\n                            <table>\n                                <tbody>\n                                    <tr>\n                                        <th colSpan={3}>Queue</th>\n                                    </tr>\n                                    <tr>\n                                        <th>Process</th>\n                                        <th>Current Deadline</th>\n                                        <th>Current Processed</th>\n                                    </tr>\n                                    {queue[\n                                        Math.min(currTime, queue.length - 1)\n                                    ][0] ? (\n                                        <tr\n                                            style={{\n                                                backgroundColor:\n                                                    \"rgba(87, 255, 120,0.2)\",\n                                            }}\n                                        >\n                                            <th>\n                                                {\n                                                    queue[\n                                                        Math.min(\n                                                            currTime,\n                                                            queue.length - 1\n                                                        )\n                                                    ][0].pid\n                                                }\n                                            </th>\n                                            <th>\n                                                {queue[\n                                                    Math.min(\n                                                        currTime,\n                                                        queue.length - 1\n                                                    )\n                                                ][0].period *\n                                                    queue[\n                                                        Math.min(\n                                                            currTime,\n                                                            queue.length - 1\n                                                        )\n                                                    ][0].instace}\n                                            </th>\n                                            <th>\n                                                {\n                                                    queue[\n                                                        Math.min(\n                                                            currTime,\n                                                            queue.length - 1\n                                                        )\n                                                    ][0].processed\n                                                }\n                                            </th>\n                                        </tr>\n                                    ) : (\n                                        <tr\n                                            style={{\n                                                backgroundColor:\n                                                    \"rgba(87, 255, 120,0.2)\",\n                                            }}\n                                        >\n                                            <td>&nbsp;</td>\n                                            <td> &nbsp;</td>\n                                            <td> &nbsp;</td>\n                                        </tr>\n                                    )}\n                                    {queue[\n                                        Math.min(currTime, queue.length - 1)\n                                    ][1].map((p, i) => (\n                                        <tr key={`queue-${i}`}>\n                                            <td>{p.pid}</td>\n                                            <td>{p.period * p.instace}</td>\n                                            <td>{p.processed}</td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </table>\n                        )}\n                    </div>\n                </div>\n                <br />\n                Simulate till Time: {tillNum} {\"   \"}\n                <input\n                    type=\"range\"\n                    min=\"30\"\n                    max=\"200\"\n                    value={tillNum}\n                    className=\"slider\"\n                    onChange={(e) => {\n                        setTillNum(e.target.value);\n                    }}\n                />\n                <br />\n                <button\n                    onClick={() => {\n                        setIsRunning(!isRunning);\n                        runningRef.current = !isRunning;\n                        if (!isRunning) {\n                            startSim();\n                        }\n                    }}\n                >\n                    {isRunning ? \"STOP\" : \"START\"}\n                </button>\n            </div>\n\n            {/* Viz */}\n            <div className=\"svg_container\">\n                <svg viewBox={`0 0 ${tillNum * 25.5} 200`}>\n                    <g>\n                        <line\n                            x1=\"0\"\n                            y1=\"100\"\n                            x2=\"100%\"\n                            y2=\"100\"\n                            className=\"line\"\n                        />\n\n                        {Array.from(Array(200)).map((_, i) => {\n                            return (\n                                <g key={\"lt\" + i.toString()}>\n                                    <line\n                                        x1={dist * (i + 1)}\n                                        y1={100 - he}\n                                        x2={dist * (i + 1)}\n                                        y2={100 + he}\n                                        className=\"line\"\n                                    />\n                                    <text\n                                        x={dist * (i + 1)}\n                                        y={120 + he}\n                                        fill=\"black\"\n                                        fontSize=\"12\"\n                                    >\n                                        {i + 1}\n                                    </text>\n                                </g>\n                            );\n                        })}\n                    </g>\n                    <g>\n                        {op.map(\n                            (p, i) =>\n                                p.startFrom <= currTime && (\n                                    <g\n                                        key={\n                                            \"op\" +\n                                            p.pid.toString() +\n                                            p.startFrom.toString()\n                                        }\n                                    >\n                                        <rect\n                                            x={dist * p.startFrom}\n                                            y={95 - he}\n                                            width={\n                                                dist *\n                                                (p.completed + p.startFrom >\n                                                currTime\n                                                    ? currTime - p.startFrom\n                                                    : p.completed)\n                                            }\n                                            height={(he + 5) * 2}\n                                            className=\"op\"\n                                            fill={p.color + \"80\"}\n                                        />\n\n                                        <text\n                                            x={dist * p.startFrom + 5}\n                                            y={96}\n                                            fontSize=\"11\"\n                                        >\n                                            {p.instace}\n                                        </text>\n                                    </g>\n                                )\n                        )}\n                    </g>\n                </svg>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}