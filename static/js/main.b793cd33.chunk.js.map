{"version":3,"sources":["processInfo.js","algorithms/rms.js","algorithms/edf.js","App.js","index.js"],"names":["processInfo","pid","period","execTime","color","this","Math","floor","random","toString","completed","processed","startFrom","rmsSolve","processes","tillNum","uti","reduce","acc","proc","n","length","limit","pow","console","log","queue","map","p","instace","op","instances","Array","from","_","currProc","maxPriProc","index","forEach","process","j","splice","push","i","pi","some","edfSolve","osOptions","value","label","scheOptions","rtos","App","useState","setProcesses","setOp","nPid","setNPid","nPer","setNPer","nExec","setNExec","setTillNum","osOpt","setOsOpt","scheOpt","setSceOpt","dist","pidRef","useRef","nprocs","isRunning","setIsRunning","runningRef","currTime","setCurrTime","nextStep","current","t","useEffect","setTimeout","id","options","onChange","opt","isSearchable","className","proces","style","backgroundColor","ref","e","target","onClick","c","focus","marginLeft","type","min","max","resOp","isOk","startSim","viewBox","x1","y1","x2","y2","x","y","fill","fontSize","width","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b793cd33.chunk.js","sourcesContent":["function getRandomColor() {\r\n    return \"#\" + Math.floor(Math.random() * 16777215).toString(16);\r\n}\r\nclass processInfo {\r\n    constructor(pid, period, execTime, color) {\r\n        this.pid = pid;\r\n        this.period = +period; //casting of string to number\r\n        this.execTime = +execTime;\r\n        this.color = color || getRandomColor(); //Getnerate randiom color for the process\r\n        this.completed = 0;\r\n        this.processed = 0;\r\n        this.startFrom = 0;\r\n    }\r\n}\r\nexport default processInfo;\r\n","//Rate-monotonic scheduling  (https://en.wikipedia.org/wiki/Rate-monotonic_scheduling)\r\nconst rmsSolve = (processes, tillNum) => {\r\n    const uti = processes.reduce(\r\n        (acc, proc) => acc + proc.execTime / proc.period,\r\n        0\r\n    );\r\n    const n = processes.length;\r\n    const limit = n * (Math.pow(2, 1 / n) - 1);\r\n    console.log(uti);\r\n    console.log(limit);\r\n    //Fails if uti > 0.6932\r\n    const queue = processes.map((p) => ({ ...p, instace: 1 }));\r\n    const op = [];\r\n    const instances = Array.from(Array(processes.length), (_) => 2);\r\n    let currProc = null;\r\n    for (let i = 0; i < tillNum; i++) {\r\n        let maxPriProc = null;\r\n        let index = -1;\r\n        queue.forEach((process, j) => {\r\n            if (maxPriProc == null) {\r\n                maxPriProc = process;\r\n                index = j;\r\n                return;\r\n            }\r\n            if (maxPriProc.execTime > process.execTime) {\r\n                maxPriProc = process;\r\n                index = j;\r\n            }\r\n        });\r\n        if (maxPriProc != null) {\r\n            if (currProc == null || currProc?.execTime > maxPriProc?.execTime) {\r\n                queue.splice(index, 1);\r\n                if (currProc) queue.push({ ...currProc });\r\n                maxPriProc.startFrom = i;\r\n                currProc = maxPriProc;\r\n                currProc.completed = 0;\r\n                op.push(maxPriProc);\r\n            }\r\n        }\r\n        // eslint-disable-next-line no-loop-func\r\n        processes.forEach((process, pi) => {\r\n            if ((i + 1) % process.period === 0) {\r\n                if (queue.some((p) => p.pid === process.pid)) {\r\n                    //TODO: Fails\r\n                    console.log(`Fails at ${i + 1} for proc ${process.pid}`);\r\n                    i = tillNum;\r\n                } else {\r\n                    queue.push({ ...process, instace: instances[pi]++ });\r\n                }\r\n            }\r\n        });\r\n        if (currProc != null) {\r\n            currProc.processed++;\r\n            currProc.completed++;\r\n            if (currProc.processed >= currProc.execTime) {\r\n                currProc = null;\r\n            }\r\n        }\r\n    }\r\n    return op;\r\n};\r\nexport default rmsSolve;\r\n","//Earliest deadline first scheduling (https://en.wikipedia.org/wiki/Earliest_deadline_first_scheduling)\r\nconst edfSolve = (processes, tillNum) => {\r\n    const uti = processes.reduce(\r\n        (acc, proc) => acc + proc.execTime / proc.period,\r\n        0\r\n    );\r\n    console.log(uti);\r\n    //Fails if uti > 1\r\n    const queue = processes.map((p) => ({ ...p, instace: 1 }));\r\n    const op = [];\r\n    const instances = Array.from(Array(processes.length), (_) => 2);\r\n    let currProc = null;\r\n    for (let i = 0; i < tillNum; i++) {\r\n        let maxPriProc = null;\r\n        let index = -1;\r\n        queue.forEach((process, j) => {\r\n            if (maxPriProc == null) {\r\n                maxPriProc = process;\r\n                index = j;\r\n                return;\r\n            }\r\n            //Having earliest dealine (period * instace)\r\n            if (\r\n                maxPriProc.period * maxPriProc.instace >\r\n                process.period * process.instace\r\n            ) {\r\n                maxPriProc = process;\r\n                index = j;\r\n            }\r\n        });\r\n        if (maxPriProc != null) {\r\n            //there is no currProc or currProc's deadline is greater than maxPrioProc's\r\n            if (\r\n                currProc == null ||\r\n                currProc.period * currProc.instace >\r\n                    maxPriProc.period * maxPriProc.instace\r\n            ) {\r\n                queue.splice(index, 1);\r\n                if (currProc) queue.push({ ...currProc });\r\n                maxPriProc.startFrom = i;\r\n                currProc = maxPriProc;\r\n                currProc.completed = 0;\r\n                op.push(maxPriProc);\r\n            }\r\n        }\r\n        // eslint-disable-next-line no-loop-func\r\n        processes.forEach((process, pi) => {\r\n            if ((i + 1) % process.period === 0) {\r\n                if (queue.some((p) => p.pid === process.pid)) {\r\n                    //TODO: Fails\r\n                    console.log(`Fails at ${i + 1} for proc ${process.pid}`);\r\n                    i = tillNum;\r\n                } else {\r\n                    queue.push({ ...process, instace: instances[pi]++ });\r\n                }\r\n            }\r\n        });\r\n        if (currProc != null) {\r\n            currProc.processed++;\r\n            currProc.completed++;\r\n            if (currProc.processed >= currProc.execTime) {\r\n                currProc = null;\r\n            }\r\n        }\r\n    }\r\n    return op;\r\n};\r\nexport default edfSolve;\r\n","import { useState, useRef, useEffect } from \"react\";\nimport Select from \"react-select\";\nimport processInfo from \"./processInfo\";\nimport rmsSolve from \"./algorithms/rms\";\nimport edfSolve from \"./algorithms/edf\";\n\nimport \"./App.css\";\n\nconst osOptions = [{ value: \"rtos\", label: \"RTOS\" }];\n\nconst scheOptions = {\n    rtos: [\n        { value: \"rms\", label: \"Rate-monotonic scheduling\" },\n        { value: \"edf\", label: \"Earliest deadline first scheduling\" },\n    ],\n};\n\nfunction App() {\n    const [processes, setProcesses] = useState([]); //Input of Process Tabel\n    // const [queue, setQueue] = useState([]); //current queue\n    const [op, setOp] = useState([]); //Op used for viz\n    const [nPid, setNPid] = useState(\"T1\");\n    const [nPer, setNPer] = useState(\"\");\n    const [nExec, setNExec] = useState(\"\");\n    const [tillNum, setTillNum] = useState(50);\n    const [osOpt, setOsOpt] = useState(osOptions[0]);\n    const [scheOpt, setSceOpt] = useState(scheOptions[osOptions[0].value][0]);\n    const dist = 25;\n    const he = 10;\n    const SPEED = 100;\n\n    const pidRef = useRef();\n    const nprocs = useRef(1);\n\n    const [isRunning, setIsRunning] = useState(false);\n    const runningRef = useRef(isRunning);\n    const [currTime, setCurrTime] = useState(0);\n\n    const nextStep = () => {\n        if (!runningRef.current) return;\n        setCurrTime((t) => {\n            if (t >= tillNum) {\n                setIsRunning(false);\n                runningRef.current = false;\n            }\n            return t + 1;\n        });\n    };\n\n    useEffect(() => {\n        if (!runningRef.current) return;\n        setTimeout(nextStep, SPEED);\n    });\n    const addNewProcess = () => {\n        setProcesses((c) => [...c, new processInfo(nPid, nPer, nExec)]);\n        setNPid(\"T\" + ++nprocs.current);\n        setNPer(\"\");\n        setNExec(\"\");\n        pidRef.current.focus();\n    };\n\n    const startSim = () => {\n        let resOp = [];\n        let isOk = true;\n        switch (scheOpt.value) {\n            case \"rms\":\n                resOp = rmsSolve(processes, tillNum);\n                break;\n            case \"edf\":\n                resOp = edfSolve(processes, tillNum);\n                break;\n            default:\n                console.log(\"Wrongs\");\n                isOk = false;\n                break;\n        }\n        if (isOk) {\n            setCurrTime(0);\n            setOp(resOp);\n            nextStep();\n        } else {\n            setIsRunning(!runningRef.current);\n            runningRef.current = !runningRef.current;\n        }\n    };\n    return (\n        <div id=\"app\">\n            <div id=\"inputs\">\n                <Select\n                    options={osOptions}\n                    onChange={(opt) => {\n                        setOsOpt(opt);\n                    }}\n                    isSearchable={false}\n                    value={osOpt}\n                    className=\"select\"\n                />\n                <Select\n                    options={scheOptions[osOpt.value]}\n                    onChange={(opt) => {\n                        setSceOpt(opt);\n                    }}\n                    value={scheOpt}\n                    isSearchable={false}\n                    className=\"select\"\n                />\n                <table id=\"process_in\" className=\"table\">\n                    <tbody>\n                        <tr>\n                            <th>Process</th>\n                            <th>Period</th>\n                            <th>Execution Time</th>\n                        </tr>\n                        {processes.map((proces, i) => (\n                            <tr key={proces.pid}>\n                                <td>\n                                    {proces.pid}{\" \"}\n                                    <span\n                                        style={{\n                                            backgroundColor: proces.color,\n                                        }}\n                                    >\n                                             \n                                    </span>\n                                </td>\n                                <td>{proces.period}</td>\n                                <td>{proces.execTime}</td>\n                            </tr>\n                        ))}\n                        <tr>\n                            <td>\n                                <input\n                                    ref={pidRef}\n                                    value={nPid}\n                                    onChange={(e) => setNPid(e.target.value)}\n                                />\n                            </td>\n                            <td>\n                                <input\n                                    value={nPer}\n                                    onChange={(e) => setNPer(e.target.value)}\n                                />\n                            </td>\n                            <td>\n                                <input\n                                    value={nExec}\n                                    onChange={(e) => setNExec(e.target.value)}\n                                />\n                                <button\n                                    onClick={addNewProcess}\n                                    style={{ marginLeft: \"10px\" }}\n                                >\n                                    +\n                                </button>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n                <br />\n                Simulate till Time: {tillNum} {\"   \"}\n                <input\n                    type=\"range\"\n                    min=\"30\"\n                    max=\"200\"\n                    value={tillNum}\n                    className=\"slider\"\n                    onChange={(e) => {\n                        setTillNum(e.target.value);\n                    }}\n                />\n                <br />\n                <button\n                    onClick={() => {\n                        setIsRunning(!isRunning);\n                        runningRef.current = !isRunning;\n                        if (!isRunning) {\n                            startSim();\n                        }\n                    }}\n                >\n                    {isRunning ? \"STOP\" : \"START\"}\n                </button>\n            </div>\n\n            {/* Viz */}\n            <div className=\"svg_container\">\n                <svg viewBox={`0 0 ${tillNum * 25.5} 200`}>\n                    <g>\n                        <line\n                            x1=\"0\"\n                            y1=\"100\"\n                            x2=\"100%\"\n                            y2=\"100\"\n                            className=\"line\"\n                        />\n\n                        {Array.from(Array(200)).map((_, i) => {\n                            return (\n                                <g key={\"lt\" + i.toString()}>\n                                    <line\n                                        x1={dist * (i + 1)}\n                                        y1={100 - he}\n                                        x2={dist * (i + 1)}\n                                        y2={100 + he}\n                                        className=\"line\"\n                                    />\n                                    <text\n                                        x={dist * (i + 1)}\n                                        y={120 + he}\n                                        fill=\"black\"\n                                        fontSize=\"12\"\n                                    >\n                                        {i + 1}\n                                    </text>\n                                </g>\n                            );\n                        })}\n                    </g>\n                    <g>\n                        {op.map(\n                            (p, i) =>\n                                p.startFrom <= currTime && (\n                                    <g\n                                        key={\n                                            \"op\" +\n                                            p.pid.toString() +\n                                            p.startFrom.toString()\n                                        }\n                                    >\n                                        <rect\n                                            x={dist * p.startFrom}\n                                            y={95 - he}\n                                            width={\n                                                dist *\n                                                (p.completed + p.startFrom >\n                                                currTime\n                                                    ? currTime - p.startFrom\n                                                    : p.completed)\n                                            }\n                                            height={(he + 5) * 2}\n                                            className=\"op\"\n                                            fill={p.color + \"80\"}\n                                        />\n\n                                        <text\n                                            x={dist * p.startFrom + 5}\n                                            y={96}\n                                            fontSize=\"11\"\n                                        >\n                                            {p.instace}\n                                        </text>\n                                    </g>\n                                )\n                        )}\n                    </g>\n                </svg>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}